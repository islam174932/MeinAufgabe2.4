{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\MeineAufgabae\\\\src\\\\components\\\\Input\\\\TodoInput.jsx\",\n  _s = $RefreshSig$();\n//styled import\nimport styled from \"styled-components\";\n//components - extern \nimport { CiCirclePlus } from \"react-icons/ci\";\nimport { FaBullseye } from \"react-icons/fa\";\n//Useref - hook\nimport { useRef } from \"react\";\n//id import\nimport { v4 as uuidv4 } from \"uuid\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function TodoInput({\n  todos,\n  setTodos\n}) {\n  _s();\n  //der hook kann HTML Elementen oder auch Komponenten aus Bibliotheken\n  //(MUI/REACT-ICONS) übergeben werden um eine Referenz zu dem Objekt \n  //früher (document.querySelector(\"<Element>\") herzustellen\n  const inputHook = useRef();\n  //Spread Operator (...) wird genutzt um die bisherigen todos aus dem \n  //array erneut zu setzen, außerdem wird ein neues Objekt mit \n  //title aus dem Wert des Inputfelds gesetzt\n  function newTodo() {\n    if (inputHook.current.value !== \"\") {\n      setTodos([...todos, {\n        id: uuidv4(),\n        title: inputHook.current.value,\n        done: false\n      }]);\n    }\n    inputHook.current.value = \"\"; //lookup\n  }\n  //Callback für Button keypress (enter)\n  function handleOnKeyPress(e) {\n    if (e.code === \"Enter\") {\n      newTodo();\n    }\n  }\n  //Callback für Buttonklick\n  function handleOnClick() {\n    newTodo();\n  }\n  return /*#__PURE__*/_jsxDEV(StyledTodoInputContainer, {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      ref: inputHook,\n      onKeyDown: handleOnKeyPress\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(CiCirclePlus, {\n      onClick: handleOnClick\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 9\n  }, this);\n}\n_s(TodoInput, \"p5WmmM3oI7MNUYe1+y+8Uob+6mw=\");\n_c = TodoInput;\nconst StyledTodoInputContainer = styled.div`\n    display: flex;\n    gap: 10px;\n`;\n_c2 = StyledTodoInputContainer;\nvar _c, _c2;\n$RefreshReg$(_c, \"TodoInput\");\n$RefreshReg$(_c2, \"StyledTodoInputContainer\");","map":{"version":3,"names":["styled","CiCirclePlus","FaBullseye","useRef","v4","uuidv4","jsxDEV","_jsxDEV","TodoInput","todos","setTodos","_s","inputHook","newTodo","current","value","id","title","done","handleOnKeyPress","e","code","handleOnClick","StyledTodoInputContainer","children","ref","onKeyDown","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","div","_c2","$RefreshReg$"],"sources":["C:/Users/User/Desktop/MeineAufgabae/src/components/Input/TodoInput.jsx"],"sourcesContent":["//styled import\r\nimport styled from \"styled-components\";\r\n//components - extern \r\nimport { CiCirclePlus } from \"react-icons/ci\";\r\nimport { FaBullseye } from \"react-icons/fa\";\r\n//Useref - hook\r\nimport { useRef } from \"react\";\r\n//id import\r\nimport { v4 as uuidv4 } from \"uuid\";\r\n\r\nexport function TodoInput({todos,setTodos}) {\r\n    //der hook kann HTML Elementen oder auch Komponenten aus Bibliotheken\r\n    //(MUI/REACT-ICONS) übergeben werden um eine Referenz zu dem Objekt \r\n    //früher (document.querySelector(\"<Element>\") herzustellen\r\n    const inputHook = useRef();\r\n    //Spread Operator (...) wird genutzt um die bisherigen todos aus dem \r\n    //array erneut zu setzen, außerdem wird ein neues Objekt mit \r\n    //title aus dem Wert des Inputfelds gesetzt\r\n    function newTodo() {\r\n        if(inputHook.current.value !== \"\") {\r\n            setTodos([\r\n                ...todos,\r\n            {\r\n                id: uuidv4(),\r\n                title: inputHook.current.value,\r\n                done: false\r\n            }])\r\n        }\r\n        inputHook.current.value = \"\"; //lookup\r\n    }\r\n    //Callback für Button keypress (enter)\r\n    function handleOnKeyPress(e) {\r\n        if(e.code === \"Enter\") {\r\n            newTodo();\r\n        }\r\n    }\r\n    //Callback für Buttonklick\r\n    function handleOnClick() {\r\n        newTodo();\r\n    }\r\n    return(\r\n        <StyledTodoInputContainer>\r\n                <input ref={inputHook} onKeyDown={handleOnKeyPress} />\r\n                <CiCirclePlus onClick={handleOnClick} />\r\n        </StyledTodoInputContainer>\r\n    )\r\n}\r\n\r\nconst StyledTodoInputContainer = styled.div`\r\n    display: flex;\r\n    gap: 10px;\r\n`\r\n"],"mappings":";;AAAA;AACA,OAAOA,MAAM,MAAM,mBAAmB;AACtC;AACA,SAASC,YAAY,QAAQ,gBAAgB;AAC7C,SAASC,UAAU,QAAQ,gBAAgB;AAC3C;AACA,SAASC,MAAM,QAAQ,OAAO;AAC9B;AACA,SAASC,EAAE,IAAIC,MAAM,QAAQ,MAAM;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEpC,OAAO,SAASC,SAASA,CAAC;EAACC,KAAK;EAACC;AAAQ,CAAC,EAAE;EAAAC,EAAA;EACxC;EACA;EACA;EACA,MAAMC,SAAS,GAAGT,MAAM,CAAC,CAAC;EAC1B;EACA;EACA;EACA,SAASU,OAAOA,CAAA,EAAG;IACf,IAAGD,SAAS,CAACE,OAAO,CAACC,KAAK,KAAK,EAAE,EAAE;MAC/BL,QAAQ,CAAC,CACL,GAAGD,KAAK,EACZ;QACIO,EAAE,EAAEX,MAAM,CAAC,CAAC;QACZY,KAAK,EAAEL,SAAS,CAACE,OAAO,CAACC,KAAK;QAC9BG,IAAI,EAAE;MACV,CAAC,CAAC,CAAC;IACP;IACAN,SAAS,CAACE,OAAO,CAACC,KAAK,GAAG,EAAE,CAAC,CAAC;EAClC;EACA;EACA,SAASI,gBAAgBA,CAACC,CAAC,EAAE;IACzB,IAAGA,CAAC,CAACC,IAAI,KAAK,OAAO,EAAE;MACnBR,OAAO,CAAC,CAAC;IACb;EACJ;EACA;EACA,SAASS,aAAaA,CAAA,EAAG;IACrBT,OAAO,CAAC,CAAC;EACb;EACA,oBACIN,OAAA,CAACgB,wBAAwB;IAAAC,QAAA,gBACjBjB,OAAA;MAAOkB,GAAG,EAAEb,SAAU;MAACc,SAAS,EAAEP;IAAiB;MAAAQ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACtDvB,OAAA,CAACN,YAAY;MAAC8B,OAAO,EAAET;IAAc;MAAAK,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACtB,CAAC;AAEnC;AAACnB,EAAA,CApCeH,SAAS;AAAAwB,EAAA,GAATxB,SAAS;AAsCzB,MAAMe,wBAAwB,GAAGvB,MAAM,CAACiC,GAAG;AAC3C;AACA;AACA,CAAC;AAAAC,GAAA,GAHKX,wBAAwB;AAAA,IAAAS,EAAA,EAAAE,GAAA;AAAAC,YAAA,CAAAH,EAAA;AAAAG,YAAA,CAAAD,GAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}